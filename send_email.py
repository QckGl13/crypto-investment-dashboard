"""
send_email.py

Sends the daily crypto investment report via SMTP. The script reads the
HTML summary produced by analysis_engine.py and composes a rich email
with a configurable subject and recipient list. SMTP credentials and
server details must be provided via environment variables or GitHub
Secrets when executed in the CI context.

Required environment variables:
  EMAIL_USER      â€“ SMTP username (e.g. your email address)
  EMAIL_PASS      â€“ SMTP password or app token
  EMAIL_HOST      â€“ SMTP server hostname (e.g. smtp.gmail.com)
  EMAIL_PORT      â€“ SMTP server port (e.g. 587)
  EMAIL_TO        â€“ Commaâ€‘separated list of recipient email addresses

Optional environment variables:
  EMAIL_SUBJECT   â€“ Subject line override. Default includes the current date.
"""

import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
from zoneinfo import ZoneInfo


def build_message(subject: str, html_body: str, sender: str, recipients: list) -> MIMEMultipart:
    """Create a MIME message with an HTML body."""
    msg = MIMEMultipart("alternative")
    msg["Subject"] = subject
    msg["From"] = sender
    msg["To"] = ", ".join(recipients)
    msg.attach(MIMEText(html_body, "html", "utf-8"))
    return msg


def main() -> None:
    # Load configuration from environment variables
    user = os.getenv("EMAIL_USER")
    passwd = os.getenv("EMAIL_PASS")
    host = os.getenv("EMAIL_HOST")
    port = int(os.getenv("EMAIL_PORT", "587"))
    recipients = os.getenv("EMAIL_TO")
    if not all([user, passwd, host, recipients]):
        raise EnvironmentError(
            "Missing one or more required email configuration variables: "
            "EMAIL_USER, EMAIL_PASS, EMAIL_HOST, EMAIL_TO"
        )
    recipient_list = [email.strip() for email in recipients.split(",") if email.strip()]
    # Determine subject
    tz = ZoneInfo(os.getenv("TIMEZONE", "America/Mexico_City"))
    today = datetime.now(tz).strftime("%Y-%m-%d")
    subject = os.getenv(
        "EMAIL_SUBJECT",
        f"ðŸ’¸ Crypto Investment Report - {today}"
    )
    # Read the HTML summary generated by analysis_engine.py
    summary_path = "email_summary.html"
    if not os.path.exists(summary_path):
        raise FileNotFoundError(
            f"{summary_path} not found. Please run analysis_engine.py before send_email.py."
        )
    with open(summary_path, "r", encoding="utf-8") as infile:
        html_body = infile.read()
    # Build and send the message
    msg = build_message(subject, html_body, user, recipient_list)
    # Connect and send
    with smtplib.SMTP(host, port) as server:
        server.starttls()
        server.login(user, passwd)
        server.sendmail(user, recipient_list, msg.as_string())


if __name__ == "__main__":
    main()
